on:
  push:
    paths:
      - "**/Dockerfile"

  workflow_dispatch:
    inputs:
      image:
        description: "Image name"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image: ${{ fromJson(steps.images.outputs.images) }}

    steps:
      - id: images
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "::set-output name=images::$(ls */Dockerfile | jq -R '.' fromjson)"

      - uses: actions/checkout@v2

      - name: Build image
        if: ${{ github.event_name == 'push' }}
        uses: uc-cdis/.github/.github/workflows/image_build_push.yaml@master
        with:
          DOCKERFILE_LOCATION: ${{ matrix.image }}/Dockerfile
          OVERRIDE_REPO_NAME: ${{ matrix.image }}
          OVERRIDE_TAG_NAME: "latest"
          ECR_AWS_ACCESS_KEY_ID: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          ECR_AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_ROBOT_TOKEN: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: Build manual image
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: uc-cdis/.github/.github/workflows/image_build_push.yaml@master
        with:
          DOCKERFILE_LOCATION: ${{ github.event.inputs.image }}/Dockerfile
          OVERRIDE_REPO_NAME: ${{ github.event.inputs.image }}
          OVERRIDE_TAG_NAME: "latest"
          ECR_AWS_ACCESS_KEY_ID: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          ECR_AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_ROBOT_TOKEN: ${{ secrets.QUAY_ROBOT_TOKEN }}
